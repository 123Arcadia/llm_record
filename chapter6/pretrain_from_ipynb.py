# 加载定义好的模型参数-此处以 Qwen-2.5-1.5B 为例
# 使用 transforemrs 的 Config 类进行加载
from torchdata.nodes import IterableWrapper
# from torchdata.datapipes.iter import IterableWrapper
from transformers import AutoConfig
import torch

# 加载一个预训练好的 tokenizer
from transformers import AutoTokenizer

# 使用该配置生成一个定义好的模型
from transformers import AutoModelForCausalLM

# 加载预训练数据
from datasets import load_dataset
# 预训练一般将文本拼接成固定长度的文本段
from itertools import chain

from transformers import TrainingArguments
# 配置训练参数
from transformers import Trainer, default_data_collator



model_path = "./autodl-tmp/qwen-1.5b"
device = 'cuda' if torch.cuda.is_available() else 'cpu'
config = AutoConfig.from_pretrained(model_path)
# print(f'{model_path}->{config=}')
# ./autodl-tmp/qwen-1.5b->config=Qwen2Config {
#   "architectures": [
#     "Qwen2ForCausalLM"
#   ],
#   "attention_dropout": 0.0,
#   "bos_token_id": 151643,
#   "dtype": "bfloat16",
#   "eos_token_id": 151643,
#   "hidden_act": "silu",
#   "hidden_size": 1536,
#   "initializer_range": 0.02,
#   "intermediate_size": 8960,
#   "layer_types": [
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention",
#     "full_attention"
#   ],
#   "max_position_embeddings": 131072,
#   "max_window_layers": 28,
#   "model_type": "qwen2",
#   "num_attention_heads": 12,
#   "num_hidden_layers": 28,
#   "num_key_value_heads": 2,
#   "rms_norm_eps": 1e-06,
#   "rope_scaling": null,
#   "rope_theta": 1000000.0,
#   "sliding_window": null,
#   "tie_word_embeddings": true,
#   "transformers_version": "4.56.2",
#   "use_cache": true,
#   "use_mrope": false,
#   "use_sliding_window": false,
#   "vocab_size": 151936
# }



model = AutoModelForCausalLM.from_config(config,trust_remote_code=True)
model.to(device)
# print(f'{model=}')
n_params = sum({p.data_ptr(): p.numel() for p in model.parameters()}.values())

# print(f"Training new model from scratch - Total size={n_params/2**20:.2f}M params")
# model=Qwen2ForCausalLM(
#   (model): Qwen2Model(
#     (embed_tokens): Embedding(151936, 1536)
#     (layers): ModuleList(
#       (0-27): 28 x Qwen2DecoderLayer(
#         (self_attn): Qwen2Attention(
#           (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
#           (k_proj): Linear(in_features=1536, out_features=256, bias=True)
#           (v_proj): Linear(in_features=1536, out_features=256, bias=True)
#           (o_proj): Linear(in_features=1536, out_features=1536, bias=False)
#         )
#         (mlp): Qwen2MLP(
#           (gate_proj): Linear(in_features=1536, out_features=8960, bias=False)
#           (up_proj): Linear(in_features=1536, out_features=8960, bias=False)
#           (down_proj): Linear(in_features=8960, out_features=1536, bias=False)
#           (act_fn): SiLU()
#         )
#         (input_layernorm): Qwen2RMSNorm((1536,), eps=1e-06)
#         (post_attention_layernorm): Qwen2RMSNorm((1536,), eps=1e-06)
#       )
#     )
#     (norm): Qwen2RMSNorm((1536,), eps=1e-06)
#     (rotary_emb): Qwen2RotaryEmbedding()
#   )
#   (lm_head): Linear(in_features=1536, out_features=151936, bias=False)
# )
# Training new model from scratch - Total size=1472.20M params

tokenizer = AutoTokenizer.from_pretrained(model_path)

# print(f'{model_path}: {tokenizer=}')
# ./autodl-tmp/qwen-1.5b: tokenizer=Qwen2TokenizerFast(name_or_path='./autodl-tmp/qwen-1.5b', vocab_size=151643, model_max_length=131072, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'eos_token': '<|endoftext|>', 'pad_token': '<|endoftext|>', 'additional_special_tokens': ['<|im_start|>', '<|im_end|>', '<|object_ref_start|>', '<|object_ref_end|>', '<|box_start|>', '<|box_end|>', '<|quad_start|>', '<|quad_end|>', '<|vision_start|>', '<|vision_end|>', '<|vision_pad|>', '<|image_pad|>', '<|video_pad|>']}, clean_up_tokenization_spaces=False, added_tokens_decoder={
# 	151643: AddedToken("<|endoftext|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151644: AddedToken("<|im_start|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151645: AddedToken("<|im_end|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151646: AddedToken("<|object_ref_start|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151647: AddedToken("<|object_ref_end|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151648: AddedToken("<|box_start|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151649: AddedToken("<|box_end|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151650: AddedToken("<|quad_start|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151651: AddedToken("<|quad_end|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151652: AddedToken("<|vision_start|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151653: AddedToken("<|vision_end|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151654: AddedToken("<|vision_pad|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151655: AddedToken("<|image_pad|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151656: AddedToken("<|video_pad|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),
# 	151657: AddedToken("<tool_call>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151658: AddedToken("</tool_call>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151659: AddedToken("<|fim_prefix|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151660: AddedToken("<|fim_middle|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151661: AddedToken("<|fim_suffix|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151662: AddedToken("<|fim_pad|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151663: AddedToken("<|repo_name|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# 	151664: AddedToken("<|file_sep|>", rstrip=False, lstrip=False, single_word=False, normalized=False, special=False),
# }
# )


ds = load_dataset('json', data_files='/root/autodl-tmp/happly-llm/llm_record/chapter6/autodl-tmp/dataset/pretrain_data/mobvoi_seq_monkey_general_open_corpus_too_small.jsonl')
print(f'{ds.column_names.keys()=}')
# ds.column_names.keys()=dict_keys(['train'])
print(f'{ds.keys()=}')
# ds.keys()=dict_keys(['train'])
print(f'{ds["train"][0]=}')
# ds["train"][0]={'text': '在查处虚开增值税专用发票案件中，常常涉及进项留抵税额和税款损失的认定和处理。在计算税款损失时，要不要将进项留抵税额包括在内？\n对此，实务中存在意见分歧。\n有人主张归并，即计算税款损失时包括进项留抵税额；\n有人主张剥离，即计算税款损失时剔除进项留抵税额。分析这个问题，需要确定进项留抵税额与税款损失之间是什么关系。\n理清这二者之间的关系，首先需要了解增值税的概念和其抵扣机制。增值税是以商品（货物、服务等）在流转过程中产生的增值额作为计税依据而征收的一种流转税。为避免重复征税，在增值税中存在抵扣链条机制。\n一般而言，交易上游企业缴纳的税额，交易下游企业可以对相应的税额进行抵扣。\n对增值税一般纳税人来说，其购进货物、服务等取得增值税专用发票，发票上的税额是进项税额。\n其出售货物、服务等，向购买方开具增值税专用发票，发票的税额是销项税额。\n一般情况下，销项税额减去进项税额的金额是应纳税额，企业根据应纳税额按期申报纳税。\n其次需要了解进项留抵税额的概念及产生原因。\n在计算销项税额和进项税额的差额时，有时会出现负数，即当期进项税额大于当期销项税额。这个差额在当期未实现抵扣，为进项留抵税额，在以后纳税人有销项税额时再进行抵扣。\n企业产生进项留抵税额的主要原因是其进项税额和销项税额时间上的不一致。\n例如，企业前期集中采购货物和服务，投资大，销项税率低于进项税率等。\n从税款抵扣的角度看，进项留抵税额只是购进的这部分进项税额参与到增值税应纳税额的计算过程中，但是其对应的进项税额抵扣还未真正实现，一般要等到其未来有相应的销项税额时，才能真正实现进项税额抵扣。\n可见，进项留抵税额处于不确定状态，能否抵扣受到很多因素影响，例如企业经营中断，没有销项税额，这时进项留抵税额就无法实现抵扣。但如果企业按照税收政策规定申请进项留抵退税，进项税额抵扣就随之实现。\n最后需要了解税款损失的概念。\n税款损失，通常是指因虚开增值税专用发票，导致国家税款被骗或者流失的金额。关于税款损失，实务中有多种表述。\n例如，北京大学法学院教授陈兴良曾谈到虚开行为本身不会造成国家税款损失，只有利用发票抵扣时才会造成国家税款损失。刘兵等编著的《虚开增值税专用发票案例司法观点和案例解析》一书中提到：“给国家税款造成损失的数额，实际上就是被骗取的国家税款在侦查终结以前无法追回的部分。”\n赵清海与王家欣合著的《增值税专用发票虚开的判定与预防》一书中提到：“司法实践中，受票方用虚开的增值税专用发票予以抵扣的税款，从而导致受票方应纳税额的减少是法院所认定的国家税款流失的金额。”\n从这些表述可见，税款损失应该是实际造成的损失，不应包括不确定的部分——进项留抵税额，进项留抵税额与税款损失之间不能直接画等号。\n综上分析，进项留抵税额，只是使国家税款处于可能被抵扣的状态，还没有真正造成国家税款流失，一般情况下应将其从税款损失中剥离，特殊条件下将其归并入税款损失。\n例如，当纳税人造假按照税收政策规定申请进项留抵税额退税后，有关税款损失将会从危险状态转化成危害结果，这时候要将有关进项留抵税额并入税款损失。\n所以，在虚开增值税专用发票案件中，一般情况下，如果以纳税人的进项税额作为税款损失的计算基数，在对其进行行政处罚或刑事处罚时，应把进项留抵税额从税款损失中剔除，但纳税人申请进项留抵退税的除外。这样处理，把处罚与危害结果相对应，体现行政处罚法的过罚相当原则和刑法的罚当其罪原则。'}

# 查看特征
column_names = list(ds["train"].features)
print(f'{column_names=}')
# column_names=['text']

# 对数据集进行 tokenize

def tokenize_function(examples):
    # 使用预先加载的 tokenizer 进行分词
    output = tokenizer([item for item in examples["text"]])
    return output

# 批量处理
tokenized_datasets = ds.map(
    tokenize_function,
    batched=True,
    num_proc=10,
    remove_columns=column_names,
    load_from_cache_file=True,
    desc="Running tokenizer on dataset",
)

print(f'{tokenized_datasets=}')
# tokenized_datasets=DatasetDict({
#     train: Dataset({
#         features: ['input_ids', 'attention_mask'],
#         num_rows: 1000001
#     })
# })



# 预训练一般将文本拼接成固定长度的文本段
block_size=2048
def group_texts(examples: dict):
    cated_examples = {k: list(chain(*examples[k])) for k in examples.keys()}
    total_len = len(cated_examples[list(cated_examples.keys())[0]])

    if total_len >= block_size:
        total_len = (total_len // block_size) * block_size
    res = {
        k: [t[i:i + block_size] for i in range(0, total_len, block_size)]
        for k, t in cated_examples.items()
    }
    print("group texts input examples length %d after_group size %d"%(len(examples['input_ids']),len(res["input_ids"])))
    res['labels'] = res['input_ids'].copy()
    return res

# 批量处理
lm_datasets = tokenized_datasets.map(
    group_texts,
    batched=True,
    num_proc=10,
    desc="Running tokenizer on dataset",
    load_from_cache_file=True,
    batch_size=40000
)
train_dataset = lm_datasets["train"]

print(f'{lm_datasets.keys()=}')
print(f'{lm_datasets["train"]}')
print(f'{lm_datasets["train"].features=}')
print(f'{lm_datasets["train"][0]=}')
print(f'{len(lm_datasets["train"])=}')
print(f'{lm_datasets["train"][1]=}')

# print(f'{lm_datasets["train"]=}')
# lm_datasets.keys()=dict_keys(['train'])
# Dataset({
#     features: ['input_ids', 'attention_mask', 'labels'],
#     num_rows: 13
# })

# lm_datasets["train"].features={'input_ids': Sequence(feature=Value(dtype='int32', id=None), length=-1, id=None), 'attention_mask': Sequence(feature=Value(dtype='int8', id=None), length=-1, id=None), 'labels': Sequence(feature=Value(dtype='int64', id=None), length=-1, id=None)}
# lm_datasets["train"][0]={'input_ids': [18493, 106416, 100226, 29767, 109742, 105223, 107717, 101995, 15946, 3837, 104495, 102031, 117743, 99337, 99990, 84088, 61191, 33108, 84088, 68153, 102170, 9370, 104585, 33108, 54542, 1773, 18493, 100768, 84088, 68153, 102170, 13343, 3837, 111343, 44063, 117743, 99337, 99990, 84088, 61191, 100630, 18493, 31843, 94432, 104270, 3837, 118603, 15946, 47606, 100065, 110691, 8997, 101114, 106509, 100040, 62926, 3837, 91676, 100768, 84088, 68153, 102170, 13343, 100630, 117743, 99337, 99990, 84088, 61191, 59217, 101114, 106509, 118266, 3837, 91676, 100768, 84088, 68153, 102170, 13343, 103869, 20755, 117743, 99337, 99990, 84088, 61191, 1773, 101042, 105073, 3837, 85106, 60610, 117743, 99337, 99990, 84088, 61191, 57218, 84088, 68153, 102170, 101920, 102021, 100145, 8997, 21887, 79766, 43288, 110566, 104186, 100145, 3837, 101140, 85106, 99794, 109742, 107402, 33108, 41146, 99990, 100837, 100674, 1773, 109742, 105599, 45943, 9909, 105020, 5373, 47874, 49567, 7552, 18493, 110676, 101925, 102710, 101720, 61191, 100622, 37643, 84088, 104282, 68536, 107374, 104491, 110676, 84088, 1773, 17714, 101153, 105444, 99543, 84088, 96050, 109742, 15946, 47606, 99990, 100837, 109658, 100674, 8997, 100141, 102018, 3837, 99886, 107118, 99304, 106600, 9370, 84088, 61191, 3837, 99886, 106733, 99304, 73670, 32664, 105004, 84088, 61191, 71817, 99990, 100837, 8997, 32664, 109742, 100141, 110339, 99883, 3837, 41146, 77172, 41299, 105020, 5373, 47874, 49567, 101094, 109742, 105223, 107717, 3837, 107717, 101913, 84088, 61191, 20412, 117743, 84088, 61191, 8997, 41146, 105216, 105020, 5373, 47874, 49567, 3837, 69041, 103946, 23384, 116977, 109742, 105223, 107717, 3837, 107717, 9370, 84088, 61191, 20412, 91453, 47882, 84088, 61191, 8997, 100141, 104705, 3837, 91453, 47882, 84088, 61191, 99536, 85336, 117743, 84088, 61191, 9370, 80094, 20412, 50511, 103311, 61191, 3837, 99304, 100345, 50511, 103311, 61191, 59879, 22704, 104664, 103311, 8997, 102460, 85106, 99794, 117743, 99337, 99990, 84088, 61191, 107402, 81217, 100394, 99917, 8997, 18493, 100768, 91453, 47882, 84088, 61191, 33108, 117743, 84088, 61191, 9370, 99572, 61191, 13343, 3837, 104685, 105609, 99393, 8863, 3837, 91676, 39165, 22704, 117743, 84088, 61191, 107043, 39165, 22704, 91453, 47882, 84088, 61191, 1773, 99487, 99572, 61191, 18493, 39165, 22704, 38342, 101884, 99990, 100837, 3837, 17714, 117743, 99337, 99990, 84088, 61191, 96050, 103934, 110339, 18830, 91453, 47882, 84088, 61191, 13343, 87256, 71817, 99990, 100837, 8997, 99304, 100394, 117743, 99337, 99990, 84088, 61191, 104396, 107711, 41146, 117743, 84088, 61191, 33108, 91453, 47882, 84088, 61191, 20450, 101913, 16530, 101266, 8997, 77557, 3837, 99304, 104533, 101096, 102049, 105020, 106510, 3837, 99716, 26288, 3837, 91453, 47882, 114864, 102617, 117743, 114864, 49567, 8997, 45181, 84088, 68153, 99990, 100837, 106413, 50930, 3837, 117743, 99337, 99990, 84088, 61191, 100009, 77172, 41299, 9370, 113964, 117743, 84088, 61191, 113965, 109742, 50511, 103311, 61191, 9370, 100768, 101925, 3837, 100131, 41146, 110019, 117743, 84088, 61191, 99990, 100837, 108936, 100690, 101884, 3837, 100141, 30534, 106200, 41146, 100353, 18830, 105004, 91453, 47882, 84088, 61191, 13343, 3837, 101901, 100690, 101884, 117743, 84088, 61191, 99990, 100837, 8997, 101479, 3837, 117743, 99337, 99990, 84088, 61191, 101199, 103486, 44091, 3837, 105095, 99990, 100837, 100683, 99555, 100741, 99564, 3837, 77557, 99304, 99881, 112788, 3837, 80443, 91453, 47882, 84088, 61191, 3837, 104616, 117743, 99337, 99990, 84088, 61191, 80158, 101068, 101884, 99990, 100837, 1773, 109605, 99304, 101892, 105870, 100138, 99812, 101915, 117743, 99337, 99990, 117102, 3837, 117743, 84088, 61191, 99990, 100837, 80158, 103571, 101884, 8997, 100161, 85106, 99794, 84088, 68153, 102170, 107402, 8997, 84088, 68153, 102170, 3837, 102119, 104442, 62112, 100226, 29767, 109742, 105223, 107717, 3837, 100673, 99599, 84088, 68153, 114645, 100631, 108862, 9370, 80094, 1773, 101888, 84088, 68153, 102170, 3837, 118603, 105656, 101312, 112926, 8997, 77557, 3837, 109885, 24339, 101085, 102040, 100348, 99355, 99584, 99798, 107582, 100226, 29767, 101070, 100775, 99670, 101090, 99599, 84088, 68153, 102170, 3837, 101043, 100152, 107717, 99990, 100837, 13343, 104674, 101090, 99599, 84088, 68153, 102170, 1773, 100351, 99807, 49567, 30868, 99610, 9370, 26940, 100226, 29767, 109742, 105223, 107717, 102206, 104341, 101313, 33108, 102206, 106637, 25067, 14777, 107729, 104496, 36987, 89012, 99599, 84088, 68153, 101090, 102170, 9370, 110902, 3837, 101359, 99486, 114645, 18158, 9370, 99599, 84088, 68153, 18493, 108820, 112080, 103982, 101068, 99626, 18397, 107625, 32945, 198, 103959, 79766, 55135, 57218, 99445, 45629, 100885, 39762, 99610, 9370, 26940, 109742, 105223, 107717, 100226, 29767, 9370, 112983, 57218, 104332, 25067, 14777, 107729, 104496, 36987, 104341, 107933, 3837, 99204, 94444, 23384, 11622, 100226, 29767, 9370, 109742, 105223, 107717, 104744, 99990, 100837, 9370, 84088, 68153, 3837, 101982, 100673, 99204, 94444, 23384, 50511, 103311, 61191, 9370, 101940, 20412, 102082, 31838, 104585, 9370, 99599, 84088, 68153, 108862, 9370, 80094, 32945, 198, 45181, 100001, 112926, 101479, 3837, 84088, 68153, 102170, 104583, 99912, 105998, 102170, 3837, 109706, 100630, 103486, 107625, 8545, 117743, 99337, 99990, 84088, 61191, 3837, 117743, 99337, 99990, 84088, 61191, 57218, 84088, 68153, 102170, 101920, 53153, 101041, 54623, 49567, 17992, 8997, 99611, 17447, 101042, 3837, 117743, 99337, 99990, 84088, 61191, 3837, 100009, 32555, 99599, 84088, 68153, 101199, 87267, 99250, 99990, 100837, 106293, 3837, 104485, 100690, 101090, 99599, 84088, 68153, 108862, 3837, 100141, 104705, 50511, 105278, 45181, 84088, 68153, 102170, 15946, 118266, 3837, 101167, 107219, 105278, 100040, 62926, 17254, 84088, 68153, 102170, 8997, 77557, 3837, 39165, 110339, 112895, 101892, 105870, 100138, 99812, 101915, 117743, 99337, 99990, 84088, 61191, 117102, 33447, 3837, 101063, 84088, 68153, 102170, 104347, 45181, 104264, 44091, 101548, 12857, 102672, 59151, 3837, 106436, 30534, 44063, 101063, 117743, 99337, 99990, 84088, 61191, 62926, 17254, 84088, 68153, 102170, 8997, 99999, 96050, 100226, 29767, 109742, 105223, 107717, 101995, 15946, 3837, 100141, 104705, 3837, 62244, 23031, 103311, 103947, 117743, 84088, 61191, 100622, 84088, 68153, 102170, 9370, 100768, 115775, 96050, 118738, 110477, 57191, 101665, 102520, 13343, 3837, 50511, 99360, 117743, 99337, 99990, 84088, 61191, 45181, 84088, 68153, 102170, 15946, 103869, 20755, 3837, 77288, 110339, 101915, 117743, 99337, 99990, 117102, 9370, 110953, 1773, 99654, 54542, 3837, 99360, 102520, 57218, 102672, 59151, 101162, 50511, 3837, 101257, 110477, 24339, 9370, 38182, 100554, 102084, 100808, 33108, 111849, 9370, 100554, 39165, 41146, 100426, 100808, 1773, 104785, 18493, 37029, 21894, 26940, 7948, 100564, 25067, 13343, 99879, 57218, 103982, 21894, 89977, 102190, 5373, 101274, 5373, 57191, 101979, 103008, 101111, 18830, 112107, 9370, 3837, 99706, 23031, 21894, 26940, 7948, 100564, 25067, 108843, 8997, 26940, 7948, 100564, 25067, 110644, 43815, 102239, 44991, 101212, 1773, 99363, 99659, 17714, 87335, 99659, 3837, 110004, 34187, 26940, 17, 15, 16, 17, 7948, 99563, 110572, 25067, 101034, 26940, 17, 15, 16, 16, 7948, 99469, 37984, 22697, 110996, 106640, 99185, 100787, 117611, 25067, 1773, 99802, 99659, 17714, 100787, 28029, 3837, 101201, 29490, 101279, 25807, 22697, 99919, 99469, 37984, 22697, 101621, 104524, 100682, 99559, 1773, 99749, 99659, 17714, 100787, 101111, 3837, 100398, 102239, 112700, 99492, 33108, 110130, 3837, 99799, 5373, 110428, 5373, 102055, 3837, 101089, 99346, 3837, 100159, 3837, 100727, 3837, 99735, 5373, 64473, 38212, 3837, 100726, 40952, 5373, 110752, 104274, 3837, 102330, 99346, 5373, 99790, 3837, 102120, 5373, 100015, 33108, 100404, 3837, 110974, 99716, 57218, 115376, 3837, 101198, 104254, 3837, 99532, 99424, 3837, 16744, 99182, 5373, 100200, 105504, 3837, 99469, 37984, 22697, 102643, 99558, 99346, 104118, 3837, 104922, 114113, 99558, 99346, 104118, 11, 104922, 99200, 22697, 99558, 99346, 104118, 49567, 16, 21, 99659, 1773, 104043, 3837, 17714, 108085, 104785, 88991, 115167, 37029, 100787, 101111, 3837, 65278, 100093, 99558, 100787, 104118, 104136, 5373, 100787, 116925, 102335, 81217, 100787, 106221, 49567, 101111, 8997, 26940, 7948, 100564, 25067, 15946, 3837, 110345, 105918, 20412, 100345, 35946, 89977, 81217, 105467, 9370, 100787, 111337, 104387, 99833, 30868, 106042, 3837, 101887, 104760, 99878, 100787, 100637, 33108, 100787, 114967, 104896, 3837, 101895, 20074, 34794, 99545, 1773, 37029, 21894, 26940, 7948, 100564, 25067, 13343, 37945, 60533, 104118, 29991, 9370, 109091, 5373, 100787, 114967, 5373, 100787, 101121, 5373, 100768, 75317, 5373, 30440, 56006, 50292, 57218, 110971, 50292, 7, 104207, 50292, 8, 49567, 8997, 26940, 7948, 100564, 25067, 99363, 99659, 101047, 101895, 20074, 17714, 105185, 100787, 8863, 3837, 100216, 57218, 21894, 26940, 7948, 100564, 25067, 15946, 99749, 99659, 105918, 18830, 112107, 9370, 95053, 23031, 99749, 99659, 9370, 118296, 108843, 8997, 21894, 26940, 7948, 100564, 25067, 99659, 118296, 37029, 34187, 63703, 100496, 75108, 17254, 9370, 41299, 24156, 39907, 3837, 101886, 3837, 87267, 99738, 100787, 20742, 31843, 106506, 73345, 48921, 20929, 57218, 107737, 112743, 112107, 8997, 21894, 26940, 7948, 100564, 25067, 100787, 20742, 15946, 108872, 37029, 66394, 36987, 144220, 854, 51463, 90919, 99558, 47882, 24968, 2073, 34794, 33983, 854, 51463, 116560, 100787, 104118, 20074, 16530, 66833, 57191, 42192, 116560, 20074, 8997, 21894, 26940, 7948, 100564, 25067, 9370, 57019, 102190, 3837, 101051, 24342, 5373, 23836, 81217, 22697, 73145, 105467, 33108, 75317, 9370, 109337, 96050, 31991, 51463, 104305, 6313, 101602, 100900, 100515, 105046, 114131, 105158, 63367, 36556, 8997, 62189, 66394, 5122, 29333, 104707, 62189, 9370, 26898, 109929, 17714, 107872, 26898, 37945, 37029, 12190, 87080, 85122, 99451, 8997, 5691, 23424, 68805, 9370, 101111, 14880, 37029, 28866, 25166, 98313, 237, 99778, 8997, 5691, 104707, 99553, 104901, 101111, 20412, 83744, 100134, 99556, 53930, 11622, 3837, 29524, 100751, 100386, 105795, 37945, 103946, 115005, 1773, 105328, 100385, 20412, 99720, 103053, 106115, 104111, 99624, 74040, 22704, 1773, 104033, 84607, 14777, 99720, 3837, 103046, 109741, 104418, 3837, 101067, 99719, 101933, 3837, 103995, 107284, 3837, 104529, 102052, 3837, 99650, 102463, 105007, 116326, 100682, 3837, 106645, 100694, 106227, 5373, 110666, 3837, 101090, 107771, 100438, 113379, 3837, 105505, 85106, 103938, 33108, 101976, 100667, 102062, 100438, 101086, 33108, 100364, 8997, 14777, 5373, 100438, 113379, 9370, 106056, 101107, 198, 16, 5373, 107640, 115285, 100438, 1773, 100137, 100438, 113379, 99558, 20742, 99601, 102141, 114142, 5373, 104153, 100716, 101355, 100512, 105135, 103996, 3837, 100654, 99639, 97084, 101930, 104247, 99431, 100196, 5373, 105241, 106765, 5373, 103953, 18830, 105430, 105135, 101107, 103653, 100687, 8997, 17, 58883, 103148, 30918, 99594, 100438, 1773, 30918, 99594, 99591, 99594, 3837, 100346, 100384, 105249, 100653, 3837, 100131, 3837, 101895, 84607, 14777, 99720, 109966, 29490, 104045, 100669, 100032, 30534, 101137, 100005, 100565, 3837, 111999, 102112, 104724, 5373, 104153, 13343, 2073, 99329, 99460, 854, 33108, 2073, 107071, 99460, 854, 15946, 85336, 3837, 53153, 101066, 104117, 105328, 100385, 105595, 99424, 8997, 18, 58883, 114554, 100548, 118134, 100438, 1773, 105473, 101919, 100714, 48692, 100311, 101064, 81217, 101089, 114626, 57191, 104928, 103953, 99838, 74040, 105135, 3837, 101207, 18493, 100196, 5373, 99415, 45629, 116167, 5373, 18830, 112526, 107870, 104162, 104048, 114554, 3837, 100438, 112782, 3837, 101070, 100548, 118134, 3837, 100636, 116452, 9370, 35926, 100474, 3837, 99564, 100134, 8997, 19, 58883, 101335, 114655, 117272, 100438, 1773, 99659, 102625, 31843, 69041, 5373, 101335, 30709, 105135, 3837, 104312, 104535, 3837, 103300, 34204, 11622, 102064, 102124, 100383, 3837, 99947, 111157, 34204, 102463, 99600, 33108, 100041, 64355, 102124, 1773, 102463, 99600, 53153, 47815, 99580, 3837, 115871, 34187, 102141, 100838, 9370, 100403, 99185, 8997, 20, 58883, 100825, 103386, 99313, 100422, 100438, 1773, 99659, 109739, 52801, 27733, 105135, 3837, 107941, 100021, 16530, 99285, 3837, 77288, 99486, 53153, 99541, 16872, 63109, 100134, 3837, 104014, 104362, 101315, 120636, 81433, 3837, 99313, 100422, 110557, 3837, 106717, 19403, 100403, 9370, 104107, 3837, 104495, 2073, 99369, 105240, 52510, 99365, 103484, 39165, 854, 8997, 21, 58883, 102746, 28029, 104028, 100438, 1773, 101883, 45629, 99279, 109957, 99720, 3837, 101070, 102956, 99632, 3837, 52801, 104815, 99695, 99697, 3837, 100134, 17447, 101753, 99349, 99756, 99746, 3837, 99424, 17447, 99526, 99405, 99526, 99621, 8997, 40820, 5373, 104120, 100438, 113379, 9370, 101894, 99917, 198, 16, 58883, 107086, 101913, 99917, 1773, 105328, 99720, 101199, 106115, 116844, 3837, 107958, 107235, 99418, 49185, 3837, 33071, 106115, 55286, 1773, 107086, 101913, 116326, 100682, 32555, 101939, 106079, 99283, 108883, 99657, 41505, 106673, 98650, 854, 101138, 1773, 100131, 3837, 103970, 101099, 102226, 101149, 109377, 102509, 106269, 102478, 5122, 99604, 109391, 101920, 111182, 100845, 101081, 3837, 40916, 109391, 101920, 111182, 106721, 101081, 1773, 101886, 3837, 40916, 20412, 105328, 99720, 3837, 104954, 99720, 107086, 36667, 99960, 17254, 103970, 22704, 3837, 68536, 100266, 99659, 99720, 87267, 97706, 112151, 108104, 22704, 8997, 17, 58883, 100438, 101913, 99917, 1773, 101067, 107086, 104896, 41505, 106673, 98650, 97907, 100347, 3837, 105328, 99720, 100438, 100394, 2073, 102024, 33590, 110750, 107541, 32664, 12857, 103947, 105537, 3837, 101049, 5373, 101976, 18493, 99650, 110508, 101047, 105058, 101134, 3837, 101181, 101920, 104225, 99564, 101138, 1773, 102141, 17447, 99185, 34187, 111943, 33071, 3837, 109112, 100034, 9370, 104250, 102704, 115711, 105178, 109516, 33071, 24968, 101070, 17447, 100347, 2073, 101442, 33071, 854, 33108, 2073, 99204, 108574, 33071, 854, 105326, 2073, 116629, 33071, 33590, 91676, 100531, 94443, 100438, 24968, 104405, 17447, 106646, 109532, 33071, 3837, 16530, 106614, 113285, 99283, 24968, 100565, 33108, 103455, 17447, 106646, 105874, 33071, 5373, 42140, 74040, 33071, 5373, 101231, 99259, 33071, 3837, 38953, 100012, 101322, 99526, 2073, 64559, 99180, 854, 68536, 119320, 99280, 112097, 3837, 57191, 17714, 112097, 75437, 99963, 16530, 49111, 24968, 102222, 17447, 100629, 2073, 58792, 100504, 33071, 33590, 111790, 109190, 105595, 99600, 100654, 100799, 106846, 102013, 95053, 97706, 107699, 99792, 64272, 99932, 106293, 8997, 18, 58883, 99719, 104249, 1773, 107825, 100140, 3837, 106269, 9370, 100206, 108122, 100741, 99812, 34187, 104174, 106362, 87267, 101121, 3837], 'attention_masklabels': [18493, 106416, 100226, 29767, 109742, 105223, 107717, 101995, 15946, 3837, 104495, 102031, 117743, 99337, 99990, 84088, 61191, 33108, 84088, 68153, 102170, 9370, 104585, 33108, 54542, 1773, 18493, 100768, 84088, 68153, 102170, 13343, 3837, 111343, 44063, 117743, 99337, 99990, 84088, 61191, 100630, 18493, 31843, 94432, 104270, 3837, 118603, 15946, 47606, 100065, 110691, 8997, 101114, 106509, 100040, 62926, 3837, 91676, 100768, 84088, 68153, 102170, 13343, 100630, 117743, 99337, 99990, 84088, 61191, 59217, 101114, 106509, 118266, 3837, 91676, 100768, 84088, 68153, 102170, 13343, 103869, 20755, 117743, 99337, 99990, 84088, 61191, 1773, 101042, 105073, 3837, 85106, 60610, 117743, 99337, 99990, 84088, 61191, 57218, 84088, 68153, 102170, 101920, 102021, 100145, 8997, 21887, 79766, 43288, 110566, 104186, 100145, 3837, 101140, 85106, 99794, 109742, 107402, 33108, 41146, 99990, 100837, 100674, 1773, 109742, 105599, 45943, 9909, 105020, 5373, 47874, 49567, 7552, 18493, 110676, 101925, 102710, 101720, 61191, 100622, 37643, 84088, 104282, 68536, 107374, 104491, 110676, 84088, 1773, 17714, 101153, 105444, 99543, 84088, 96050, 109742, 15946, 47606, 99990, 100837, 109658, 100674, 8997, 100141, 102018, 3837, 99886, 107118, 99304, 106600, 9370, 84088, 61191, 3837, 99886, 106733, 99304, 73670, 32664, 105004, 84088, 61191, 71817, 99990, 100837, 8997, 32664, 109742, 100141, 110339, 99883, 3837, 41146, 77172, 41299, 105020, 5373, 47874, 49567, 101094, 109742, 105223, 107717, 3837, 107717, 101913, 84088, 61191, 20412, 117743, 84088, 61191, 8997, 41146, 105216, 105020, 5373, 47874, 49567, 3837, 69041, 103946, 23384, 116977, 109742, 105223, 107717, 3837, 107717, 9370, 84088, 61191, 20412, 91453, 47882, 84088, 61191, 8997, 100141, 104705, 3837, 91453, 47882, 84088, 61191, 99536, 85336, 117743, 84088, 61191, 9370, 80094, 20412, 50511, 103311, 61191, 3837, 99304, 100345, 50511, 103311, 61191, 59879, 22704, 104664, 103311, 8997, 102460, 85106, 99794, 117743, 99337, 99990, 84088, 61191, 107402, 81217, 100394, 99917, 8997, 18493, 100768, 91453, 47882, 84088, 61191, 33108, 117743, 84088, 61191, 9370, 99572, 61191, 13343, 3837, 104685, 105609, 99393, 8863, 3837, 91676, 39165, 22704, 117743, 84088, 61191, 107043, 39165, 22704, 91453, 47882, 84088, 61191, 1773, 99487, 99572, 61191, 18493, 39165, 22704, 38342, 101884, 99990, 100837, 3837, 17714, 117743, 99337, 99990, 84088, 61191, 96050, 103934, 110339, 18830, 91453, 47882, 84088, 61191, 13343, 87256, 71817, 99990, 100837, 8997, 99304, 100394, 117743, 99337, 99990, 84088, 61191, 104396, 107711, 41146, 117743, 84088, 61191, 33108, 91453, 47882, 84088, 61191, 20450, 101913, 16530, 101266, 8997, 77557, 3837, 99304, 104533, 101096, 102049, 105020, 106510, 3837, 99716, 26288, 3837, 91453, 47882, 114864, 102617, 117743, 114864, 49567, 8997, 45181, 84088, 68153, 99990, 100837, 106413, 50930, 3837, 117743, 99337, 99990, 84088, 61191, 100009, 77172, 41299, 9370, 113964, 117743, 84088, 61191, 113965, 109742, 50511, 103311, 61191, 9370, 100768, 101925, 3837, 100131, 41146, 110019, 117743, 84088, 61191, 99990, 100837, 108936, 100690, 101884, 3837, 100141, 30534, 106200, 41146, 100353, 18830, 105004, 91453, 47882, 84088, 61191, 13343, 3837, 101901, 100690, 101884, 117743, 84088, 61191, 99990, 100837, 8997, 101479, 3837, 117743, 99337, 99990, 84088, 61191, 101199, 103486, 44091, 3837, 105095, 99990, 100837, 100683, 99555, 100741, 99564, 3837, 77557, 99304, 99881, 112788, 3837, 80443, 91453, 47882, 84088, 61191, 3837, 104616, 117743, 99337, 99990, 84088, 61191, 80158, 101068, 101884, 99990, 100837, 1773, 109605, 99304, 101892, 105870, 100138, 99812, 101915, 117743, 99337, 99990, 117102, 3837, 117743, 84088, 61191, 99990, 100837, 80158, 103571, 101884, 8997, 100161, 85106, 99794, 84088, 68153, 102170, 107402, 8997, 84088, 68153, 102170, 3837, 102119, 104442, 62112, 100226, 29767, 109742, 105223, 107717, 3837, 100673, 99599, 84088, 68153, 114645, 100631, 108862, 9370, 80094, 1773, 101888, 84088, 68153, 102170, 3837, 118603, 105656, 101312, 112926, 8997, 77557, 3837, 109885, 24339, 101085, 102040, 100348, 99355, 99584, 99798, 107582, 100226, 29767, 101070, 100775, 99670, 101090, 99599, 84088, 68153, 102170, 3837, 101043, 100152, 107717, 99990, 100837, 13343, 104674, 101090, 99599, 84088, 68153, 102170, 1773, 100351, 99807, 49567, 30868, 99610, 9370, 26940, 100226, 29767, 109742, 105223, 107717, 102206, 104341, 101313, 33108, 102206, 106637, 25067, 14777, 107729, 104496, 36987, 89012, 99599, 84088, 68153, 101090, 102170, 9370, 110902, 3837, 101359, 99486, 114645, 18158, 9370, 99599, 84088, 68153, 18493, 108820, 112080, 103982, 101068, 99626, 18397, 107625, 32945, 198, 103959, 79766, 55135, 57218, 99445, 45629, 100885, 39762, 99610, 9370, 26940, 109742, 105223, 107717, 100226, 29767, 9370, 112983, 57218, 104332, 25067, 14777, 107729, 104496, 36987, 104341, 107933, 3837, 99204, 94444, 23384, 11622, 100226, 29767, 9370, 109742, 105223, 107717, 104744, 99990, 100837, 9370, 84088, 68153, 3837, 101982, 100673, 99204, 94444, 23384, 50511, 103311, 61191, 9370, 101940, 20412, 102082, 31838, 104585, 9370, 99599, 84088, 68153, 108862, 9370, 80094, 32945, 198, 45181, 100001, 112926, 101479, 3837, 84088, 68153, 102170, 104583, 99912, 105998, 102170, 3837, 109706, 100630, 103486, 107625, 8545, 117743, 99337, 99990, 84088, 61191, 3837, 117743, 99337, 99990, 84088, 61191, 57218, 84088, 68153, 102170, 101920, 53153, 101041, 54623, 49567, 17992, 8997, 99611, 17447, 101042, 3837, 117743, 99337, 99990, 84088, 61191, 3837, 100009, 32555, 99599, 84088, 68153, 101199, 87267, 99250, 99990, 100837, 106293, 3837, 104485, 100690, 101090, 99599, 84088, 68153, 108862, 3837, 100141, 104705, 50511, 105278, 45181, 84088, 68153, 102170, 15946, 118266, 3837, 101167, 107219, 105278, 100040, 62926, 17254, 84088, 68153, 102170, 8997, 77557, 3837, 39165, 110339, 112895, 101892, 105870, 100138, 99812, 101915, 117743, 99337, 99990, 84088, 61191, 117102, 33447, 3837, 101063, 84088, 68153, 102170, 104347, 45181, 104264, 44091, 101548, 12857, 102672, 59151, 3837, 106436, 30534, 44063, 101063, 117743, 99337, 99990, 84088, 61191, 62926, 17254, 84088, 68153, 102170, 8997, 99999, 96050, 100226, 29767, 109742, 105223, 107717, 101995, 15946, 3837, 100141, 104705, 3837, 62244, 23031, 103311, 103947, 117743, 84088, 61191, 100622, 84088, 68153, 102170, 9370, 100768, 115775, 96050, 118738, 110477, 57191, 101665, 102520, 13343, 3837, 50511, 99360, 117743, 99337, 99990, 84088, 61191, 45181, 84088, 68153, 102170, 15946, 103869, 20755, 3837, 77288, 110339, 101915, 117743, 99337, 99990, 117102, 9370, 110953, 1773, 99654, 54542, 3837, 99360, 102520, 57218, 102672, 59151, 101162, 50511, 3837, 101257, 110477, 24339, 9370, 38182, 100554, 102084, 100808, 33108, 111849, 9370, 100554, 39165, 41146, 100426, 100808, 1773, 104785, 18493, 37029, 21894, 26940, 7948, 100564, 25067, 13343, 99879, 57218, 103982, 21894, 89977, 102190, 5373, 101274, 5373, 57191, 101979, 103008, 101111, 18830, 112107, 9370, 3837, 99706, 23031, 21894, 26940, 7948, 100564, 25067, 108843, 8997, 26940, 7948, 100564, 25067, 110644, 43815, 102239, 44991, 101212, 1773, 99363, 99659, 17714, 87335, 99659, 3837, 110004, 34187, 26940, 17, 15, 16, 17, 7948, 99563, 110572, 25067, 101034, 26940, 17, 15, 16, 16, 7948, 99469, 37984, 22697, 110996, 106640, 99185, 100787, 117611, 25067, 1773, 99802, 99659, 17714, 100787, 28029, 3837, 101201, 29490, 101279, 25807, 22697, 99919, 99469, 37984, 22697, 101621, 104524, 100682, 99559, 1773, 99749, 99659, 17714, 100787, 101111, 3837, 100398, 102239, 112700, 99492, 33108, 110130, 3837, 99799, 5373, 110428, 5373, 102055, 3837, 101089, 99346, 3837, 100159, 3837, 100727, 3837, 99735, 5373, 64473, 38212, 3837, 100726, 40952, 5373, 110752, 104274, 3837, 102330, 99346, 5373, 99790, 3837, 102120, 5373, 100015, 33108, 100404, 3837, 110974, 99716, 57218, 115376, 3837, 101198, 104254, 3837, 99532, 99424, 3837, 16744, 99182, 5373, 100200, 105504, 3837, 99469, 37984, 22697, 102643, 99558, 99346, 104118, 3837, 104922, 114113, 99558, 99346, 104118, 11, 104922, 99200, 22697, 99558, 99346, 104118, 49567, 16, 21, 99659, 1773, 104043, 3837, 17714, 108085, 104785, 88991, 115167, 37029, 100787, 101111, 3837, 65278, 100093, 99558, 100787, 104118, 104136, 5373, 100787, 116925, 102335, 81217, 100787, 106221, 49567, 101111, 8997, 26940, 7948, 100564, 25067, 15946, 3837, 110345, 105918, 20412, 100345, 35946, 89977, 81217, 105467, 9370, 100787, 111337, 104387, 99833, 30868, 106042, 3837, 101887, 104760, 99878, 100787, 100637, 33108, 100787, 114967, 104896, 3837, 101895, 20074, 34794, 99545, 1773, 37029, 21894, 26940, 7948, 100564, 25067, 13343, 37945, 60533, 104118, 29991, 9370, 109091, 5373, 100787, 114967, 5373, 100787, 101121, 5373, 100768, 75317, 5373, 30440, 56006, 50292, 57218, 110971, 50292, 7, 104207, 50292, 8, 49567, 8997, 26940, 7948, 100564, 25067, 99363, 99659, 101047, 101895, 20074, 17714, 105185, 100787, 8863, 3837, 100216, 57218, 21894, 26940, 7948, 100564, 25067, 15946, 99749, 99659, 105918, 18830, 112107, 9370, 95053, 23031, 99749, 99659, 9370, 118296, 108843, 8997, 21894, 26940, 7948, 100564, 25067, 99659, 118296, 37029, 34187, 63703, 100496, 75108, 17254, 9370, 41299, 24156, 39907, 3837, 101886, 3837, 87267, 99738, 100787, 20742, 31843, 106506, 73345, 48921, 20929, 57218, 107737, 112743, 112107, 8997, 21894, 26940, 7948, 100564, 25067, 100787, 20742, 15946, 108872, 37029, 66394, 36987, 144220, 854, 51463, 90919, 99558, 47882, 24968, 2073, 34794, 33983, 854, 51463, 116560, 100787, 104118, 20074, 16530, 66833, 57191, 42192, 116560, 20074, 8997, 21894, 26940, 7948, 100564, 25067, 9370, 57019, 102190, 3837, 101051, 24342, 5373, 23836, 81217, 22697, 73145, 105467, 33108, 75317, 9370, 109337, 96050, 31991, 51463, 104305, 6313, 101602, 100900, 100515, 105046, 114131, 105158, 63367, 36556, 8997, 62189, 66394, 5122, 29333, 104707, 62189, 9370, 26898, 109929, 17714, 107872, 26898, 37945, 37029, 12190, 87080, 85122, 99451, 8997, 5691, 23424, 68805, 9370, 101111, 14880, 37029, 28866, 25166, 98313, 237, 99778, 8997, 5691, 104707, 99553, 104901, 101111, 20412, 83744, 100134, 99556, 53930, 11622, 3837, 29524, 100751, 100386, 105795, 37945, 103946, 115005, 1773, 105328, 100385, 20412, 99720, 103053, 106115, 104111, 99624, 74040, 22704, 1773, 104033, 84607, 14777, 99720, 3837, 103046, 109741, 104418, 3837, 101067, 99719, 101933, 3837, 103995, 107284, 3837, 104529, 102052, 3837, 99650, 102463, 105007, 116326, 100682, 3837, 106645, 100694, 106227, 5373, 110666, 3837, 101090, 107771, 100438, 113379, 3837, 105505, 85106, 103938, 33108, 101976, 100667, 102062, 100438, 101086, 33108, 100364, 8997, 14777, 5373, 100438, 113379, 9370, 106056, 101107, 198, 16, 5373, 107640, 115285, 100438, 1773, 100137, 100438, 113379, 99558, 20742, 99601, 102141, 114142, 5373, 104153, 100716, 101355, 100512, 105135, 103996, 3837, 100654, 99639, 97084, 101930, 104247, 99431, 100196, 5373, 105241, 106765, 5373, 103953, 18830, 105430, 105135, 101107, 103653, 100687, 8997, 17, 58883, 103148, 30918, 99594, 100438, 1773, 30918, 99594, 99591, 99594, 3837, 100346, 100384, 105249, 100653, 3837, 100131, 3837, 101895, 84607, 14777, 99720, 109966, 29490, 104045, 100669, 100032, 30534, 101137, 100005, 100565, 3837, 111999, 102112, 104724, 5373, 104153, 13343, 2073, 99329, 99460, 854, 33108, 2073, 107071, 99460, 854, 15946, 85336, 3837, 53153, 101066, 104117, 105328, 100385, 105595, 99424, 8997, 18, 58883, 114554, 100548, 118134, 100438, 1773, 105473, 101919, 100714, 48692, 100311, 101064, 81217, 101089, 114626, 57191, 104928, 103953, 99838, 74040, 105135, 3837, 101207, 18493, 100196, 5373, 99415, 45629, 116167, 5373, 18830, 112526, 107870, 104162, 104048, 114554, 3837, 100438, 112782, 3837, 101070, 100548, 118134, 3837, 100636, 116452, 9370, 35926, 100474, 3837, 99564, 100134, 8997, 19, 58883, 101335, 114655, 117272, 100438, 1773, 99659, 102625, 31843, 69041, 5373, 101335, 30709, 105135, 3837, 104312, 104535, 3837, 103300, 34204, 11622, 102064, 102124, 100383, 3837, 99947, 111157, 34204, 102463, 99600, 33108, 100041, 64355, 102124, 1773, 102463, 99600, 53153, 47815, 99580, 3837, 115871, 34187, 102141, 100838, 9370, 100403, 99185, 8997, 20, 58883, 100825, 103386, 99313, 100422, 100438, 1773, 99659, 109739, 52801, 27733, 105135, 3837, 107941, 100021, 16530, 99285, 3837, 77288, 99486, 53153, 99541, 16872, 63109, 100134, 3837, 104014, 104362, 101315, 120636, 81433, 3837, 99313, 100422, 110557, 3837, 106717, 19403, 100403, 9370, 104107, 3837, 104495, 2073, 99369, 105240, 52510, 99365, 103484, 39165, 854, 8997, 21, 58883, 102746, 28029, 104028, 100438, 1773, 101883, 45629, 99279, 109957, 99720, 3837, 101070, 102956, 99632, 3837, 52801, 104815, 99695, 99697, 3837, 100134, 17447, 101753, 99349, 99756, 99746, 3837, 99424, 17447, 99526, 99405, 99526, 99621, 8997, 40820, 5373, 104120, 100438, 113379, 9370, 101894, 99917, 198, 16, 58883, 107086, 101913, 99917, 1773, 105328, 99720, 101199, 106115, 116844, 3837, 107958, 107235, 99418, 49185, 3837, 33071, 106115, 55286, 1773, 107086, 101913, 116326, 100682, 32555, 101939, 106079, 99283, 108883, 99657, 41505, 106673, 98650, 854, 101138, 1773, 100131, 3837, 103970, 101099, 102226, 101149, 109377, 102509, 106269, 102478, 5122, 99604, 109391, 101920, 111182, 100845, 101081, 3837, 40916, 109391, 101920, 111182, 106721, 101081, 1773, 101886, 3837, 40916, 20412, 105328, 99720, 3837, 104954, 99720, 107086, 36667, 99960, 17254, 103970, 22704, 3837, 68536, 100266, 99659, 99720, 87267, 97706, 112151, 108104, 22704, 8997, 17, 58883, 100438, 101913, 99917, 1773, 101067, 107086, 104896, 41505, 106673, 98650, 97907, 100347, 3837, 105328, 99720, 100438, 100394, 2073, 102024, 33590, 110750, 107541, 32664, 12857, 103947, 105537, 3837, 101049, 5373, 101976, 18493, 99650, 110508, 101047, 105058, 101134, 3837, 101181, 101920, 104225, 99564, 101138, 1773, 102141, 17447, 99185, 34187, 111943, 33071, 3837, 109112, 100034, 9370, 104250, 102704, 115711, 105178, 109516, 33071, 24968, 101070, 17447, 100347, 2073, 101442, 33071, 854, 33108, 2073, 99204, 108574, 33071, 854, 105326, 2073, 116629, 33071, 33590, 91676, 100531, 94443, 100438, 24968, 104405, 17447, 106646, 109532, 33071, 3837, 16530, 106614, 113285, 99283, 24968, 100565, 33108, 103455, 17447, 106646, 105874, 33071, 5373, 42140, 74040, 33071, 5373, 101231, 99259, 33071, 3837, 38953, 100012, 101322, 99526, 2073, 64559, 99180, 854, 68536, 119320, 99280, 112097, 3837, 57191, 17714, 112097, 75437, 99963, 16530, 49111, 24968, 102222, 17447, 100629, 2073, 58792, 100504, 33071, 33590, 111790, 109190, 105595, 99600, 100654, 100799, 106846, 102013, 95053, 97706, 107699, 99792, 64272, 99932, 106293, 8997, 18, 58883, 99719, 104249, 1773, 107825, 100140, 3837, 106269, 9370, 100206, 108122, 100741, 99812, 34187, 104174, 106362, 87267, 101121, 3837]}
# len(lm_datasets["train"])=13

print('-'*20, '配置训练参数', '-'*20)

training_args = TrainingArguments(
    output_dir="autodl-tmp/output/pretrain",
    per_device_train_batch_size=4,
    gradient_accumulation_steps=4,
    logging_steps=10,
    num_train_epochs=1,
    save_steps=100,
    learning_rate=1e-4,
    save_on_each_node=True,
    gradient_checkpointing=True
)

# 训练器
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset= IterableWrapper(train_dataset),
    eval_dataset= None,
    tokenizer=tokenizer,
    # 默认为 MLM 的 collator，使用 CLM 的 collater
    data_collator=default_data_collator
)

print('start train')
train_result = trainer.train()















